import sqlite3
from telebot import types
import logging
import os
from PIL import Image, ImageDraw, ImageFont
import io
import pandas as pd
import openpyxl
from fpdf import FPDF
import random
import telebot
import math

logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ–¥–∏–Ω —Ä–∞–∑
DB_PATH = os.path.join(os.path.dirname(__file__), '..', 'db', 'characters.db')

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Å —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —ç–º–æ–¥–∑–∏
CHARACTERISTICS_MAP = {
    'hp': ('‚ù§Ô∏è –û–ó', '–û–ó'),
    'hp_regen': ('ü©∏ –†–µ–≥–µ–Ω –û–ó', '—Ä–µ–≥–µ–Ω_–û–ó'),
    'mana': ('üíô –ú–∞–Ω–∞', '–º–∞–Ω–∞/—ç–Ω–µ—Ä–≥–∏—è'),
    'mana_regen': ('üíß –†–µ–≥–µ–Ω –º–∞–Ω—ã', '—Ä–µ–≥–µ–Ω_–º–∞–Ω—ã/—ç–Ω–µ—Ä–≥–∏–∏'),
    'phys_attack': ('‚öîÔ∏è –§–∏–∑.–∞—Ç–∞–∫–∞', '—Ñ–∏–∑_–∞—Ç–∞–∫–∞'),
    'phys_def': ('üõ°Ô∏è –§–∏–∑.–∑–∞—â–∏—Ç–∞', '—Ñ–∏–∑_–∑–∞—â–∏—Ç–∞'),
    'mag_def': ('üõ°Ô∏è –ú–∞–≥.–∑–∞—â–∏—Ç–∞', '–º–∞–≥_–∑–∞—â–∏—Ç–∞'),
    'attack_speed': ('üèπ –°–∫–æ—Ä.–∞—Ç–∞–∫–∏', '—Å–∫–æ—Ä–æ—Å—Ç—å_–∞—Ç–∞–∫–∏'),
    'move_speed': ('üèÉ –°–∫–æ—Ä.–¥–≤–∏–∂–µ–Ω–∏—è', '—Å–∫–æ—Ä–æ—Å—Ç—å_–ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è')
}

def check_db_structure():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect(DB_PATH)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É DB_PATH
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = cursor.fetchall()
        
        logger.info("–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:")
        for table in tables:
            logger.info(f"Table: {table[0]}")
            cursor.execute(f"PRAGMA table_info('{table[0]}')")
            columns = cursor.fetchall()
            logger.info(f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã {table[0]}:")
            for column in columns:
                logger.info(f"  Column: {column[1]}, Type: {column[2]}")
            
        conn.close()
        return tables
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î: {e}")
        return None

# –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–¥ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
columns = check_db_structure()

def get_heroes_by_stat(stat, level):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≥–µ—Ä–æ–µ–≤ –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–µ"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()

        growing_stats = {
            '–û–ó': ('–û–ó', '–ø—Ä–∏—Ä–æ—Å—Ç_–û–ó'),
            '—Ä–µ–≥–µ–Ω_–û–ó': ('—Ä–µ–≥–µ–Ω_–û–ó', '–ø—Ä–∏—Ä–æ—Å—Ç_—Ä–µ–≥–µ–Ω_–û–ó'),
            '–º–∞–Ω–∞/—ç–Ω–µ—Ä–≥–∏—è': ('–º–∞–Ω–∞/—ç–Ω–µ—Ä–≥–∏—è', '–ø—Ä–∏—Ä–æ—Å—Ç_–º–∞–Ω–∞/—ç–Ω–µ—Ä–≥–∏—è'),
            '—Ä–µ–≥–µ–Ω_–º–∞–Ω—ã/—ç–Ω–µ—Ä–≥–∏–∏': ('—Ä–µ–≥–µ–Ω_–º–∞–Ω—ã/—ç–Ω–µ—Ä–≥–∏–∏', '–ø—Ä–∏—Ä–æ—Å—Ç_—Ä–µ–≥–µ–Ω_–º–∞–Ω—ã/—ç–Ω–µ—Ä–≥–∏–∏'),
            '—Ñ–∏–∑_–∞—Ç–∞–∫–∞': ('—Ñ–∏–∑_–∞—Ç–∞–∫–∞', '–ø—Ä–∏—Ä–æ—Å—Ç_—Ñ–∏–∑_–∞—Ç–∞–∫–∞'),
            '—Ñ–∏–∑_–∑–∞—â–∏—Ç–∞': ('—Ñ–∏–∑_–∑–∞—â–∏—Ç–∞', '–ø—Ä–∏—Ä–æ—Å—Ç_—Ñ–∏–∑_–∑–∞—â–∏—Ç–∞'),
            '–º–∞–≥_–∑–∞—â–∏—Ç–∞': ('–º–∞–≥_–∑–∞—â–∏—Ç–∞', '–ø—Ä–∏—Ä–æ—Å—Ç_–º–∞–≥_–∑–∞—â–∏—Ç–∞'),
            '—Å–∫–æ—Ä–æ—Å—Ç—å_–∞—Ç–∞–∫–∏': ('—Å–∫–æ—Ä–æ—Å—Ç—å_–∞—Ç–∞–∫–∏', '–ø—Ä–∏—Ä–æ—Å—Ç_—Å–∫–æ—Ä–æ—Å—Ç—å_–∞—Ç–∞–∫–∏')
        }

        if stat in growing_stats:
            base_stat, growth_stat = growing_stats[stat]
            query = f"""
            SELECT n.–∏–º—è,
                   no.{base_stat} + (up.{growth_stat} * (? - 1)) as calculated_stat
            FROM hero_names n
            JOIN hero_chars_no_up no ON n.id = no.character_id
            JOIN hero_chars_up up ON n.id = up.character_id
            ORDER BY calculated_stat DESC
            """
        else:
            query = f"""
            SELECT n.–∏–º—è, no.{stat}
            FROM hero_names n
            JOIN hero_chars_no_up no ON n.id = no.character_id
            ORDER BY no.{stat} DESC
            """

        cursor.execute(query, (level,) if stat in growing_stats else ())
        results = cursor.fetchall()
        conn.close()
        return results

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î: {e}")
        return []

def register_handlers(bot):
    @bot.message_handler(commands=['chars_table'])
    def chars_table_cmd(message):
        try:
            kb = types.InlineKeyboardMarkup(row_width=2)
            for short_code, (btn_text, full_stat_name) in CHARACTERISTICS_MAP.items():
                kb.add(types.InlineKeyboardButton(
                    btn_text, 
                    callback_data=f"charTable::{short_code}"
                ))
            bot.send_message(
                message.chat.id,
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≥–µ—Ä–æ–µ–≤:",
                reply_markup=kb
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–Ω—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {e}")
            bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("charTable::"))
    def char_table_callback(call):
        try:
            short_code = call.data.split("::")[1]
            stat_name = CHARACTERISTICS_MAP[short_code][1]
            
            ask_output_format(bot, call.message, stat_name)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")
            bot.answer_callback_query(
                call.id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    @bot.callback_query_handler(func=lambda call: call.data.startswith('page:'))
    def handle_pagination(call):
        try:
            _, stat_name, level, page = call.data.split(':')
            page = int(page)
            level = int(level)
            
            results = get_heroes_by_stat(stat_name, level)
            if results:
                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text=create_formatted_message(results, page, stat_name, level),
                    reply_markup=create_pagination_keyboard(
                        page,
                        (len(results) + 29) // 30,
                        stat_name,
                        level
                    ),
                    parse_mode='HTML'  # –ú–µ–Ω—è–µ–º –Ω–∞ HTML
                )
                    
            bot.answer_callback_query(call.id)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}")
            bot.answer_callback_query(
                call.id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("format:"))
    def format_handler(call):
        try:
            format_type, stat_name = call.data.split(":")[1:]
            msg = bot.send_message(
                call.message.chat.id,
                "–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –≥–µ—Ä–æ—è (1-15):"
            )
            bot.register_next_step_handler(
                msg, 
                lambda m: process_level_input_with_format(m, bot, stat_name, format_type)
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ä–º–∞—Ç–∞: {e}")
            bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("download_full:"))
    def handle_full_list_download(call):
        try:
            _, stat_name, level = call.data.split(":")
            level = int(level)
            results = get_heroes_by_stat(stat_name, level)
            
            if results:
                # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å –ø–æ–ª–Ω—ã–º —Å–ø–∏—Å–∫–æ–º
                output = io.StringIO()
                output.write(f"üèÜ –†–µ–π—Ç–∏–Ω–≥ –≥–µ—Ä–æ–µ–≤ –ø–æ '{stat_name}' –Ω–∞ {level} —É—Ä–æ–≤–Ω–µ:\n\n")
                
                max_name_length = max(len(format_hero_name(hero)) for hero, _ in results)
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                output.write(f"{'‚Ññ':3} ‚îÇ {'–ì–µ—Ä–æ–π':<{max_name_length}} ‚îÇ {'–ó–Ω–∞—á–µ–Ω–∏–µ':>10}\n")
                output.write("‚îÄ" * (max_name_length + 17) + "\n")
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
                for idx, (hero, value) in enumerate(results, 1):
                    hero_name = format_hero_name(hero)
                    if value is not None:
                        value_str = f"{round(float(value), 2):>10.2f}"
                    else:
                        value_str = "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                    output.write(f"{idx:3} ‚îÇ {hero_name:<{max_name_length}} ‚îÇ {value_str:>10}\n")
                
                output.seek(0)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                bot.send_document(
                    call.message.chat.id,
                    ('full_list.txt', output.getvalue().encode('utf-8')),
                    caption=f"üìÑ –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≥–µ—Ä–æ–µ–≤ –ø–æ '{stat_name}' –Ω–∞ {level} —É—Ä–æ–≤–Ω–µ"
                )
                
            bot.answer_callback_query(call.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞: {e}")
            bot.answer_callback_query(
                call.id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    def handle_text_pagination(bot, call):
        try:
            _, stat_name, level, page = call.data.split(':')
            level = int(level)
            page = int(page)
            
            results = get_heroes_by_stat(stat_name, level)
            if results:
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text=create_text_page(results, stat_name, level, page),
                    parse_mode='HTML',
                    reply_markup=create_text_pagination_markup(
                        len(results),
                        page,
                        stat_name,
                        level
                    )
                )
            
            bot.answer_callback_query(call.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}")
            bot.answer_callback_query(
                call.id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    @bot.callback_query_handler(func=lambda call: call.data.startswith('text_page:'))
    def text_page_handler(call):
        handle_text_pagination(bot, call)

    return chars_table_cmd

def create_pagination_keyboard(current_page, total_pages, stat, level):
    kb = types.InlineKeyboardMarkup(row_width=3)
    buttons = []
    
    if current_page > 1:
        buttons.append(types.InlineKeyboardButton(
            '‚¨ÖÔ∏è', callback_data=f'page:{stat}:{level}:{current_page-1}'
        ))
    
    buttons.append(types.InlineKeyboardButton(
        f'{current_page}/{total_pages}', callback_data='current_page'
    ))
    
    if current_page < total_pages:
        buttons.append(types.InlineKeyboardButton(
            '‚û°Ô∏è', callback_data=f'page:{stat}:{level}:{current_page+1}'
        ))
    
    kb.add(*buttons)
    return kb

def format_hero_name(name):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –≥–µ—Ä–æ—è —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã"""
    return name.title()

def show_heroes_page(bot, chat_id, results, page, stat_name, level):
    HEROES_PER_PAGE = 30  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ—Ä–æ–µ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    total_pages = (len(results) + HEROES_PER_PAGE - 1) // HEROES_PER_PAGE
    
    start_idx = (page - 1) * HEROES_PER_PAGE
    end_idx = start_idx + HEROES_PER_PAGE
    page_results = results[start_idx:end_idx]
    
    # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏ –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
    max_name_length = max(len(format_hero_name(hero)) for hero, _ in page_results)
    
    response = f"üèÜ –†–µ–π—Ç–∏–Ω–≥ –≥–µ—Ä–æ–µ–≤ –ø–æ '{stat_name}' –Ω–∞ {level} —É—Ä–æ–≤–Ω–µ:\n\n"
    response += "```\n"  # Beginning of monospace text block
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    response += f"{'‚Ññ':3} | {'–ì–µ—Ä–æ–π':<{max_name_length}} | {'–ó–Ω–∞—á–µ–Ω–∏–µ':>10}\n"
    response += "-" * (max_name_length + 17) + "\n"
    
    for idx, (hero, value) in enumerate(page_results, start=start_idx + 1):
        if value is not None:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º
            hero_name = format_hero_name(hero)
            value_str = f"{round(float(value), 2):>10.2f}"
            response += f"{idx:3} | {hero_name:<{max_name_length}} | {value_str}\n"
        else:
            response += f"{idx:3} | {hero_name:<{max_name_length}} | {'–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö':>10}\n"
    
    response += "```"  # End of monospace text block
    
    kb = create_pagination_keyboard(page, total_pages, stat_name, level)
    bot.send_message(
        chat_id,
        response,
        reply_markup=kb,
        parse_mode='Markdown'  # –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Markdown
    )

def create_formatted_message(results, stat_name, level):
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ –≤—Å–µ–º–∏ –≥–µ—Ä–æ—è–º–∏ –≤ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ"""
    # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏
    max_name_length = max(len(format_hero_name(hero)) for hero, _ in results)
    
    message = f"üèÜ –†–µ–π—Ç–∏–Ω–≥ –≥–µ—Ä–æ–µ–≤ –ø–æ '{stat_name}' –Ω–∞ {level} —É—Ä–æ–≤–Ω–µ:\n\n"
    message += "<pre>"
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    message += f"{'‚Ññ':3} ‚îÇ {'–ì–µ—Ä–æ–π':<{max_name_length}} ‚îÇ {'–ó–Ω–∞—á–µ–Ω–∏–µ':>10}\n"
    message += "‚îÄ" * 3 + "‚îº" + "‚îÄ" * (max_name_length + 2) + "‚îº" + "‚îÄ" * 12 + "\n"
    
    # –í—ã–≤–æ–¥–∏–º –≤—Å–µ—Ö –≥–µ—Ä–æ–µ–≤
    for idx, (hero, value) in enumerate(results, start=1):
        hero_name = format_hero_name(hero)
        if value is not None:
            value_str = f"{round(float(value), 2):>10.2f}"
        else:
            value_str = "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            
        message += f"{idx:3} ‚îÇ {hero_name:<{max_name_length}} ‚îÇ {value_str:>10}\n"
    
    message += "</pre>"
    return message

def create_table_image(results, stat_name, level):
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ –æ—Ç—Å—Ç—É–ø–æ–≤
    PADDING = 50
    LINE_HEIGHT = 25
    FONT_SIZE = 18
    COLUMNS = 3
    COLUMN_SPACING = 80
    
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤ –≤–Ω—É—Ç—Ä–∏ –∫–æ–ª–æ–Ω–∫–∏
    NUM_COL_WIDTH = 40
    HERO_COL_WIDTH = max(len(format_hero_name(hero)) for hero, _ in results) * 11
    VAL_COL_WIDTH = 80
    COLUMN_WIDTH = NUM_COL_WIDTH + HERO_COL_WIDTH + VAL_COL_WIDTH + 20
    
    # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –≤ —Å—Ç–∏–ª–µ MLBB
    COLORS = {
        'background': '#1A1A2E',     # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω
        'header_bg': '#E94560',      # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        'header_text': '#FFFFFF',     # –ë–µ–ª—ã–π –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        'text': '#FFFFFF',           # –ë–µ–ª—ã–π –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        'value': '#FED7D7',          # –°–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π
        'column_bg': (22, 33, 62, 230),  # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω –∫–æ–ª–æ–Ω–æ–∫ —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
        'row_alt': (31, 48, 94, 230),    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ü–≤–µ—Ç —Å—Ç—Ä–æ–∫ —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
        'border': '#E94560',         # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –≥—Ä–∞–Ω–∏—Ü
    }

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    heroes_per_column = (len(results) + COLUMNS - 1) // COLUMNS
    column_data = [results[i:i + heroes_per_column] for i in range(0, len(results), heroes_per_column)]
    
    width = (COLUMN_WIDTH * COLUMNS) + (COLUMN_SPACING * (COLUMNS - 1)) + (PADDING * 2)
    height = (heroes_per_column + 3) * LINE_HEIGHT + PADDING * 2

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–æ–Ω–∞
    background_path = os.path.join(os.path.dirname(__file__), '..', 'media', 'background')
    background_files = [f for f in os.listdir(background_path) if f.endswith(('.png', '.jpg', '.jpeg'))]
    
    if (background_files):
        random_bg = random.choice(background_files)
        background = Image.open(os.path.join(background_path, random_bg))
        # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–æ–Ω–∞ –ø–æ–¥ —Ä–∞–∑–º–µ—Ä –Ω–∞—à–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        background = background.resize((width, height), Image.Resampling.LANCZOS)
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª–æ–º
        img = Image.new('RGBA', (width, height), (0, 0, 0, 0))
    else:
        # –ï—Å–ª–∏ —Ñ–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º —Å–ø–ª–æ—à–Ω–æ–π —Ñ–æ–Ω
        img = Image.new('RGBA', (width, height), COLORS['background'])
        background = None

    draw = ImageDraw.Draw(img)
    
    try:
        # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å Arial
        font_path = os.path.join(os.path.dirname(__file__), '..', 'assets', 'fonts', 'arial.ttf')
        title_font_path = os.path.join(os.path.dirname(__file__), '..', 'assets', 'fonts', 'arialbd.ttf')
        
        font = ImageFont.truetype(font_path, FONT_SIZE)
        title_font = ImageFont.truetype(title_font_path, FONT_SIZE + 4)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à—Ä–∏—Ñ—Ç–∞: {e}")
        # –ï—Å–ª–∏ Arial –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å, –ø—Ä–æ–±—É–µ–º DejaVu
        try:
            font_path = os.path.join(os.path.dirname(__file__), '..', 'assets', 'fonts', 'DejaVuSansCondensed.ttf')
            font = ImageFont.truetype(font_path, FONT_SIZE)
            title_font = ImageFont.truetype(font_path, FONT_SIZE + 4)
        except:
            # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç
            font = ImageFont.load_default()
            title_font = font

    # –†–∏—Å—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ñ–æ–Ω–æ–º
    title = f"üèÜ –†–µ–π—Ç–∏–Ω–≥ –≥–µ—Ä–æ–µ–≤ –ø–æ '{stat_name}' –Ω–∞ {level} —É—Ä–æ–≤–Ω–µ"
    title_width = draw.textlength(title, font=title_font)
    
    # –§–æ–Ω –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
    title_bg_height = LINE_HEIGHT + PADDING
    draw.rectangle(
        [(PADDING//2, PADDING//2),
         (width - PADDING//2, PADDING + title_bg_height)],
        fill=(22, 33, 62, 230)
    )
    
    draw.text(
        ((width - title_width) // 2, PADDING),
        title,
        font=title_font,
        fill=COLORS['header_text']
    )

    # –†–∏—Å—É–µ–º –∫–æ–ª–æ–Ω–∫–∏
    y_start = PADDING + LINE_HEIGHT * 2
    for col_idx, column in enumerate(column_data):
        x_start = PADDING + col_idx * (COLUMN_WIDTH + COLUMN_SPACING)
        y = y_start
        
        x_num = x_start + 10
        x_hero = x_num + NUM_COL_WIDTH
        x_val = x_hero + HERO_COL_WIDTH
        
        # –§–æ–Ω –∫–æ–ª–æ–Ω–∫–∏ —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
        draw.rectangle(
            [(x_start - PADDING//4, y - PADDING//4),
             (x_start + COLUMN_WIDTH - PADDING//4, height - PADDING)],
            fill=COLORS['column_bg'],
            outline=COLORS['border'],
            width=2
        )
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–ª–æ–Ω–∫–∏
        draw.rectangle(
            [(x_start - PADDING//4, y - PADDING//4),
             (x_start + COLUMN_WIDTH - PADDING//4, y + LINE_HEIGHT)],
            fill=COLORS['header_bg']
        )
        
        draw.text((x_num, y), "‚Ññ", font=font, fill=COLORS['header_text'])
        draw.text((x_hero, y), "–ì–µ—Ä–æ–π", font=font, fill=COLORS['header_text'])
        draw.text((x_val, y), "–ó–Ω–∞—á–µ–Ω–∏–µ", font=font, fill=COLORS['header_text'])
        
        y += LINE_HEIGHT

        start_idx = col_idx * heroes_per_column
        for idx, (hero, value) in enumerate(column, start=start_idx + 1):
            if idx % 2 == 0:
                draw.rectangle(
                    [(x_start - PADDING//4, y),
                     (x_start + COLUMN_WIDTH - PADDING//4, y + LINE_HEIGHT)],
                    fill=COLORS['row_alt']
                )
            
            hero_name = format_hero_name(hero)
            value_str = f"{round(float(value), 2):.2f}" if value is not None else "–Ω/–¥"
            
            draw.text((x_num, y), str(idx).rjust(3), font=font, fill=COLORS['text'])
            draw.text((x_hero, y), hero_name, font=font, fill=COLORS['text'])
            draw.text((x_val, y), value_str.rjust(8), font=font, fill=COLORS['value'])
            
            y += LINE_HEIGHT

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ñ–æ–Ω –∏ —Ç–∞–±–ª–∏—Ü—É
    if background:
        final_image = Image.alpha_composite(background.convert('RGBA'), img)
    else:
        final_image = img

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    img_byte_arr = io.BytesIO()
    final_image.save(img_byte_arr, format='PNG', quality=95)
    img_byte_arr.seek(0)
    return img_byte_arr

def process_level_input(message, bot, stat_name):
    try:
        level = int(message.text.strip())
        if not 1 <= level <= 15:
            raise ValueError("–£—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 15")
            
        wait_msg = bot.send_message(
            message.chat.id,
            "‚åõ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."
        )
        
        results = get_heroes_by_stat(stat_name, level)
        
        if not results:
            bot.delete_message(message.chat.id, wait_msg.message_id)
            bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≥–µ—Ä–æ–µ–≤.")
            return
            
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img_bytes = create_table_image(results, stat_name, level)
        
        bot.delete_message(message.chat.id, wait_msg.message_id)
        bot.send_photo(
            message.chat.id,
            img_bytes,
            caption=f"üèÜ –†–µ–π—Ç–∏–Ω–≥ –≥–µ—Ä–æ–µ–≤ –ø–æ '{stat_name}' –Ω–∞ {level} —É—Ä–æ–≤–Ω–µ"
        )
        
    except ValueError:
        msg = bot.reply_to(
            message,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (–æ—Ç 1 –¥–æ 15)."
        )
        bot.register_next_step_handler(msg, lambda m: process_level_input(m, bot, stat_name))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Ä–æ–≤–Ω—è: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def process_level_input_with_cancel(message, bot, stat_name):
    if message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        bot.send_message(
            message.chat.id, 
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=types.ReplyKeyboardRemove()
        )
        return
    
    process_level_input(message, bot, stat_name)

def ask_output_format(bot, message, stat_name):
    """–°–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∂–µ–ª–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞"""
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("üìù –¢–µ–∫—Å—Ç", callback_data=f"format:text:{stat_name}"),
        types.InlineKeyboardButton("üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data=f"format:image:{stat_name}"),
        types.InlineKeyboardButton("üìä Excel", callback_data=f"format:excel:{stat_name}"),
        types.InlineKeyboardButton("üìÑ PDF", callback_data=f"format:pdf:{stat_name}")
    )
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö:",
        reply_markup=markup
    )

def create_excel_file(results, stat_name, level):
    """–°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞"""
    df = pd.DataFrame(results, columns=['–ì–µ—Ä–æ–π', '–ó–Ω–∞—á–µ–Ω–∏–µ'])
    df.index = df.index + 1  # –ù–∞—á–∏–Ω–∞–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é —Å 1
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª Excel
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, sheet_name=f'–†–µ–π—Ç–∏–Ω–≥_{stat_name}')
        worksheet = writer.sheets[f'–†–µ–π—Ç–∏–Ω–≥_{stat_name}']
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        for idx, col in enumerate(df.columns):
            worksheet.column_dimensions[openpyxl.utils.get_column_letter(idx + 2)].width = 20
    
    output.seek(0)
    return output

def create_pdf_file(results, stat_name, level):
    """–°–æ–∑–¥–∞–Ω–∏–µ PDF —Ñ–∞–π–ª–∞ —Å —Ç–∞–±–ª–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ - –≤—Å–µ –≥–µ—Ä–æ–∏ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º fpdf2 –≤–º–µ—Å—Ç–æ fpdf –¥–ª—è –ª—É—á—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Unicode
        from fpdf import FPDF
        import os
        import io
        import math

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —à—Ä–∏—Ñ—Ç–∞–º –≤ –ø–∞–ø–∫–µ assets
        font_dir = os.path.join(os.path.dirname(__file__), '..', 'assets', 'fonts')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —à—Ä–∏—Ñ—Ç–æ–≤
        font_files = os.listdir(font_dir) if os.path.exists(font_dir) else []
        logger.info(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã: {font_files}")
        
        # –°–æ–∑–¥–∞–µ–º PDF —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Unicode
        class PDF(FPDF):
            def __init__(self):
                super().__init__(orientation='P', unit='mm', format='A4')
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞–∑—Ä—ã–≤ —Å—Ç—Ä–∞–Ω–∏—Ü
                self.set_auto_page_break(auto=True, margin=5)
                
            def header(self):
                # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º MLBB
                self.set_font('DejaVu', 'B', 12)
                self.set_text_color(220, 50, 50)  # –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
                title = f"–†–µ–π—Ç–∏–Ω–≥ –≥–µ—Ä–æ–µ–≤ –ø–æ '{stat_name}' –Ω–∞ {level} —É—Ä–æ–≤–Ω–µ"
                self.cell(0, 6, txt=title, ln=True, align='C')
                
            def footer(self):
                # –ù–∏–∂–Ω–∏–π –∫–æ–ª–æ–Ω—Ç–∏—Ç—É–ª
                self.set_y(-7)
                self.set_font('DejaVu', 'I', 6)
                self.set_text_color(128, 128, 128)
                self.cell(0, 5, 'MLBB Helper Bot', 0, 0, 'C')
                
        # –°–æ–∑–¥–∞–µ–º PDF-–¥–æ–∫—É–º–µ–Ω—Ç
        pdf = PDF()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —à—Ä–∏—Ñ—Ç DejaVu –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
        dejavu_path = os.path.join(font_dir, 'DejaVuSansCondensed.ttf')
        pdf.add_font('DejaVu', '', dejavu_path, uni=True)
        pdf.add_font('DejaVu', 'B', os.path.join(font_dir, 'DejaVuSansCondensed-Bold.ttf'), uni=True)
        pdf.add_font('DejaVu', 'I', os.path.join(font_dir, 'DejaVuSansCondensed-Oblique.ttf'), uni=True)
        
        pdf.add_page()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —à—Ä–∏—Ñ—Ç DejaVu —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Unicode, –Ω–æ –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        pdf.set_font('DejaVu', '', 6)  # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫ –∏ —Å—Ç—Ä–æ–∫ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤—Å–µ—Ö –≥–µ—Ä–æ–µ–≤
        total_heroes = len(results)
        columns = 3  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 3 –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –∫–∞–∂–¥–æ–π –∫–æ–ª–æ–Ω–∫–µ
        rows_per_column = math.ceil(total_heroes / columns)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫ (A4 = 210mm —à–∏—Ä–∏–Ω–∞)
        page_width = 210
        margin = 5  # –£–º–µ–Ω—å—à–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è –±–æ–ª—å—à–µ–π –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
        usable_width = page_width - 2 * margin
        column_width = usable_width / columns
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤ –≤–Ω—É—Ç—Ä–∏ –∫–æ–ª–æ–Ω–∫–∏
        num_width = 7
        value_width = 18
        hero_width = column_width - num_width - value_width
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        header_color = (220, 50, 50)  # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        row1_color = (240, 240, 240)  # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π –¥–ª—è —á–µ—Ç–Ω—ã—Ö —Å—Ç—Ä–æ–∫
        row2_color = (255, 255, 255)  # –ë–µ–ª—ã–π –¥–ª—è –Ω–µ—á–µ—Ç–Ω—ã—Ö —Å—Ç—Ä–æ–∫
        text_color = (0, 0, 0)  # –ß–µ—Ä–Ω—ã–π –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        
        # –í—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫–∏
        row_height = 4  # –£–º–µ–Ω—å—à–∞–µ–º –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
        
        # –û—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        y_offset = 10
        
        # –†–∏—Å—É–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º
        for col in range(columns):
            # –í—ã—á–∏—Å–ª—è–µ–º x-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–æ–ª–æ–Ω–∫–∏
            x = margin + col * column_width
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
            pdf.set_xy(x, y_offset)
            pdf.set_fill_color(*header_color)
            pdf.set_text_color(255, 255, 255)  # –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
            pdf.cell(num_width, row_height, '‚Ññ', 1, 0, 'C', True)
            pdf.cell(hero_width, row_height, '–ì–µ—Ä–æ–π', 1, 0, 'C', True)
            pdf.cell(value_width, row_height, '–ó–Ω–∞—á–µ–Ω–∏–µ', 1, 1, 'C', True)
            
            # –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
            pdf.set_text_color(*text_color)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–æ–ª–æ–Ω–∫–∏
            start_idx = col * rows_per_column
            end_idx = min(start_idx + rows_per_column, total_heroes)
            
            for i in range(start_idx, end_idx):
                idx = i + 1
                hero, value = results[i]
                
                # –ß–µ—Ä–µ–¥—É–µ–º —Ü–≤–µ—Ç–∞ —Å—Ç—Ä–æ–∫
                if idx % 2 == 0:
                    pdf.set_fill_color(*row1_color)
                else:
                    pdf.set_fill_color(*row2_color)
                
                hero_name = format_hero_name(hero)
                value_str = f"{round(float(value), 2):.2f}" if value is not None else "–Ω/–¥"
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏
                current_y = y_offset + row_height + (i - start_idx) * row_height
                pdf.set_xy(x, current_y)
                
                # –†–∏—Å—É–µ–º —è—á–µ–π–∫–∏
                pdf.cell(num_width, row_height, str(idx), 1, 0, 'C', True)
                pdf.cell(hero_width, row_height, hero_name, 1, 0, 'L', True)
                pdf.cell(value_width, row_height, value_str, 1, 1, 'R', True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF –≤ –±–∞–π—Ç–æ–≤—ã–π –ø–æ—Ç–æ–∫
        output = io.BytesIO()
        pdf.output(output)
        output.seek(0)
        return output
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {e}")
        raise

def process_level_input_with_format(message, bot, stat_name, format_type):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —É—Ä–æ–≤–Ω—è —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞"""
    try:
        level = int(message.text.strip())
        if not 1 <= level <= 15:
            msg = bot.reply_to(
                message,
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (–æ—Ç 1 –¥–æ 15)."
            )
            bot.register_next_step_handler(
                msg, 
                lambda m: process_level_input_with_format(m, bot, stat_name, format_type)
            )
            return
            
        wait_msg = bot.send_message(
            message.chat.id,
            "‚åõ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."
        )
        
        results = get_heroes_by_stat(stat_name, level)
        if not results:
            bot.delete_message(message.chat.id, wait_msg.message_id)
            bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≥–µ—Ä–æ–µ–≤.")
            return

        bot.delete_message(message.chat.id, wait_msg.message_id)
        
        format_handlers = {
            "text": send_text_format,
            "image": send_image_format,
            "excel": send_excel_format,
            "pdf": send_pdf_format
        }
        
        if format_type in format_handlers:
            format_handlers[format_type](bot, message, results, stat_name, level)
        else:
            bot.reply_to(message, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            
    except ValueError:
        msg = bot.reply_to(
            message,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (–æ—Ç 1 –¥–æ 15)."
        )
        bot.register_next_step_handler(
            msg, 
            lambda m: process_level_input_with_format(m, bot, stat_name, format_type)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Ä–æ–≤–Ω—è: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –§—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
def send_text_format(bot, message, results, stat_name, level, page=1):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    ITEMS_PER_PAGE = 30
    total_pages = (len(results) + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = (page - 1) * ITEMS_PER_PAGE
    end_idx = start_idx + ITEMS_PER_PAGE
    page_results = results[start_idx:end_idx]
    
    # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏ –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
    max_name_length = max(len(format_hero_name(hero)) for hero, _ in results)
    
    response = f"üèÜ –†–µ–π—Ç–∏–Ω–≥ –≥–µ—Ä–æ–µ–≤ –ø–æ '{stat_name}' –Ω–∞ {level} —É—Ä–æ–≤–Ω–µ (—Å—Ç—Ä. {page}/{total_pages}):\n\n"
    response += "<pre>"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    response += f"{'‚Ññ':3} ‚îÇ {'–ì–µ—Ä–æ–π':<{max_name_length}} ‚îÇ {'–ó–Ω–∞—á–µ–Ω–∏–µ':>10}\n"
    response += "‚îÄ" * (max_name_length + 17) + "\n"
    
    # –í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    for idx, (hero, value) in enumerate(page_results, start=start_idx + 1):
        hero_name = format_hero_name(hero)
        if value is not None:
            value_str = f"{round(float(value), 2):>10.2f}"
        else:
            value_str = "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            
        response += f"{idx:3} ‚îÇ {hero_name:<{max_name_length}} ‚îÇ {value_str:>10}\n"
    
    response += "</pre>"
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    markup = types.InlineKeyboardMarkup()
    nav_buttons = []
    
    if page > 1:
        nav_buttons.append(types.InlineKeyboardButton(
            '‚óÄÔ∏è', callback_data=f'text_page:{stat_name}:{level}:{page-1}'
        ))
    
    nav_buttons.append(types.InlineKeyboardButton(
        f'{page}/{total_pages}', callback_data='current_page'
    ))
    
    if page < total_pages:
        nav_buttons.append(types.InlineKeyboardButton(
            '‚ñ∂Ô∏è', callback_data=f'text_page:{stat_name}:{level}:{page+1}'
        ))
    
    markup.add(*nav_buttons)
    
    bot.send_message(
        message.chat.id,
        response,
        parse_mode='HTML',
        reply_markup=markup
    )

def handle_text_pagination(bot, call):
    try:
        _, stat_name, level, page = call.data.split(':')
        level = int(level)
        page = int(page)
        
        results = get_heroes_by_stat(stat_name, level)
        if results:
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=create_text_page(results, stat_name, level, page),
                parse_mode='HTML',
                reply_markup=create_text_pagination_markup(
                    len(results),
                    page,
                    stat_name,
                    level
                )
            )
        
        bot.answer_callback_query(call.id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}")
        bot.answer_callback_query(
            call.id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        bot.answer_callback_query(
            call.id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

def create_text_page(results, stat_name, level, page):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –¥–∞–Ω–Ω—ã–º–∏"""
    ITEMS_PER_PAGE = 30
    total_pages = (len(results) + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE
    
    start_idx = (page - 1) * ITEMS_PER_PAGE
    end_idx = start_idx + ITEMS_PER_PAGE
    page_results = results[start_idx:end_idx]
    
    max_name_length = max(len(format_hero_name(hero)) for hero, _ in results)
    
    response = f"üèÜ –†–µ–π—Ç–∏–Ω–≥ –≥–µ—Ä–æ–µ–≤ –ø–æ '{stat_name}' –Ω–∞ {level} —É—Ä–æ–≤–Ω–µ (—Å—Ç—Ä. {page}/{total_pages}):\n\n"
    response += "<pre>"
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    response += f"{'‚Ññ':3} ‚îÇ {'–ì–µ—Ä–æ–π':<{max_name_length}} ‚îÇ {'–ó–Ω–∞—á–µ–Ω–∏–µ':>10}\n"
    # –°–ø–ª–æ—à–Ω–∞—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
    response += "‚îÄ" * (max_name_length + 17) + "\n"
    
    for idx, (hero, value) in enumerate(page_results, start=start_idx + 1):
        hero_name = format_hero_name(hero)
        if value is not None:
            value_str = f"{round(float(value), 2):>10.2f}"
        else:
            value_str = "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            
        response += f"{idx:3} ‚îÇ {hero_name:<{max_name_length}} ‚îÇ {value_str:>10}\n"
    
    response += "</pre>"
    return response

def create_text_pagination_markup(total_items, current_page, stat_name, level):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    markup = types.InlineKeyboardMarkup()
    nav_buttons = []
    total_pages = (total_items + 29) // 30
    
    if current_page > 1:
        nav_buttons.append(types.InlineKeyboardButton(
            '‚óÄÔ∏è', callback_data=f'text_page:{stat_name}:{level}:{current_page-1}'
        ))
    
    nav_buttons.append(types.InlineKeyboardButton(
        f'{current_page}/{total_pages}', callback_data='current_page'
    ))
    
    if current_page < total_pages:
        nav_buttons.append(types.InlineKeyboardButton(
            '‚ñ∂Ô∏è', callback_data=f'text_page:{stat_name}:{level}:{current_page+1}'
        ))
    
    markup.add(*nav_buttons)
    return markup

def send_image_format(bot, message, results, stat_name, level):
    img_bytes = create_table_image(results, stat_name, level)
    bot.send_document(
        message.chat.id,
        ('table.png', img_bytes),
        caption=f"üèÜ –†–µ–π—Ç–∏–Ω–≥ –≥–µ—Ä–æ–µ–≤ –ø–æ '{stat_name}' –Ω–∞ {level} —É—Ä–æ–≤–Ω–µ"
    )

def send_excel_format(bot, message, results, stat_name, level):
    excel_bytes = create_excel_file(results, stat_name, level)
    bot.send_document(
        message.chat.id,
        ('rating.xlsx', excel_bytes),
        caption=f"üìä –†–µ–π—Ç–∏–Ω–≥ –≥–µ—Ä–æ–µ–≤ –ø–æ '{stat_name}' –Ω–∞ {level} —É—Ä–æ–≤–Ω–µ"
    )

def send_pdf_format(bot, message, results, stat_name, level):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ PDF —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏"""
    try:
        chat_id = message.chat.id
        pdf_data = create_pdf_file(results, stat_name, level)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        filename = f"heroes_rating_{stat_name}_{level}.pdf"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
        bot.send_document(
            chat_id,
            pdf_data,
            caption=f"üèÜ –†–µ–π—Ç–∏–Ω–≥ –≥–µ—Ä–æ–µ–≤ –ø–æ '{stat_name}' –Ω–∞ {level} —É—Ä–æ–≤–Ω–µ",
            visible_file_name=filename
        )
        
        logger.info(f"PDF —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF: {e}")
        bot.reply_to(
            message,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç.",
            reply_parameters=telebot.types.ReplyParameters(message_id=message.message_id)
        )
