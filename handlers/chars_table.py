import sqlite3
from telebot import types
import logging
import os

logger = logging.getLogger(__name__)

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ CSV
CHARACTERISTICS_MAP = {
    'hp': ('‚ù§Ô∏è –û–ó', '–û–ó'),
    'hp_regen': ('üíó –†–µ–≥–µ–Ω –û–ó', '—Ä–µ–≥–µ–Ω_–û–ó'),
    'mana': ('üíô –ú–∞–Ω–∞', '–º–∞–Ω–∞/—ç–Ω–µ—Ä–≥–∏—è'),
    'mana_regen': ('üí† –†–µ–≥–µ–Ω –º–∞–Ω—ã', '—Ä–µ–≥–µ–Ω_–º–∞–Ω—ã/—ç–Ω–µ—Ä–≥–∏–∏'),
    'phys_attack': ('‚öîÔ∏è –§–∏–∑.–∞—Ç–∞–∫–∞', '—Ñ–∏–∑_–∞—Ç–∞–∫–∞'),
    'phys_def': ('üõ°Ô∏è –§–∏–∑.–∑–∞—â–∏—Ç–∞', '—Ñ–∏–∑_–∑–∞—â–∏—Ç–∞'),
    'mag_def': ('üîÆ –ú–∞–≥.–∑–∞—â–∏—Ç–∞', '–º–∞–≥_–∑–∞—â–∏—Ç–∞'),
    'attack_speed': ('‚ö° –°–∫–æ—Ä.–∞—Ç–∞–∫–∏', '—Å–∫–æ—Ä–æ—Å—Ç—å_–∞—Ç–∞–∫–∏'),
    'move_speed': ('üëü –°–∫–æ—Ä.–¥–≤–∏–∂–µ–Ω–∏—è', '—Å–∫–æ—Ä–æ—Å—Ç—å_–ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è')
}

def check_db_structure():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect('characters.db')
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–ª–±—Ü–∞—Ö —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("PRAGMA table_info(heroes)")
        columns = cursor.fetchall()
        
        print("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã heroes:")
        for column in columns:
            print(f"Column: {column[1]}, Type: {column[2]}")
            
        conn.close()
        return columns
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î: {e}")
        return None

# –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–¥ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
columns = check_db_structure()

def get_heroes_by_stat(stat, level):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≥–µ—Ä–æ–µ–≤ –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–µ"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_path = os.path.join(os.path.dirname(__file__), '..', 'db', 'characters.db')
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Ä–∞—Å—Ç–µ—Ç –ª–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —Å —É—Ä–æ–≤–Ω–µ–º
        growing_stats = {
            '–û–ó': ('–û–ó', '–ø—Ä–∏—Ä–æ—Å—Ç_–û–ó'),
            '—Ä–µ–≥–µ–Ω_–û–ó': ('—Ä–µ–≥–µ–Ω_–û–ó', '–ø—Ä–∏—Ä–æ—Å—Ç_—Ä–µ–≥–µ–Ω_–û–ó'),
            '–º–∞–Ω–∞/—ç–Ω–µ—Ä–≥–∏—è': ('–º–∞–Ω–∞/—ç–Ω–µ—Ä–≥–∏—è', '–ø—Ä–∏—Ä–æ—Å—Ç_–º–∞–Ω–∞/—ç–Ω–µ—Ä–≥–∏—è'),
            '—Ä–µ–≥–µ–Ω_–º–∞–Ω—ã/—ç–Ω–µ—Ä–≥–∏–∏': ('—Ä–µ–≥–µ–Ω_–º–∞–Ω—ã/—ç–Ω–µ—Ä–≥–∏–∏', '–ø—Ä–∏—Ä–æ—Å—Ç_—Ä–µ–≥–µ–Ω_–º–∞–Ω—ã/—ç–Ω–µ—Ä–≥–∏–∏'),
            '—Ñ–∏–∑_–∞—Ç–∞–∫–∞': ('—Ñ–∏–∑_–∞—Ç–∞–∫–∞', '–ø—Ä–∏—Ä–æ—Å—Ç_—Ñ–∏–∑_–∞—Ç–∞–∫–∞'),
            '—Ñ–∏–∑_–∑–∞—â–∏—Ç–∞': ('—Ñ–∏–∑_–∑–∞—â–∏—Ç–∞', '–ø—Ä–∏—Ä–æ—Å—Ç_—Ñ–∏–∑_–∑–∞—â–∏—Ç–∞'),
            '–º–∞–≥_–∑–∞—â–∏—Ç–∞': ('–º–∞–≥_–∑–∞—â–∏—Ç–∞', '–ø—Ä–∏—Ä–æ—Å—Ç_–º–∞–≥_–∑–∞—â–∏—Ç–∞'),
            '—Å–∫–æ—Ä–æ—Å—Ç—å_–∞—Ç–∞–∫–∏': ('—Å–∫–æ—Ä–æ—Å—Ç—å_–∞—Ç–∞–∫–∏', '–ø—Ä–∏—Ä–æ—Å—Ç_—Å–∫–æ—Ä–æ—Å—Ç—å_–∞—Ç–∞–∫–∏')
        }
        
        if stat in growing_stats:
            base_stat, growth_stat = growing_stats[stat]
            query = f"""
            SELECT –∏–º—è, 
                   {base_stat} + ({growth_stat} * (? - 1)) as calculated_stat
            FROM characters 
            ORDER BY calculated_stat DESC
            """
        else:
            query = f"""
            SELECT –∏–º—è, {stat}
            FROM characters
            ORDER BY {stat} DESC
            """
        
        cursor.execute(query, (level,) if stat in growing_stats else ())
        results = cursor.fetchall()
        conn.close()
        
        return results
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î: {e}")
        return []

def register_handlers(bot):
    @bot.message_handler(commands=['chars_table'])
    def chars_table_cmd(message):
        try:
            kb = types.InlineKeyboardMarkup(row_width=2)
            for short_code, (btn_text, full_stat_name) in CHARACTERISTICS_MAP.items():
                kb.add(types.InlineKeyboardButton(
                    btn_text, 
                    callback_data=f"charTable::{short_code}"
                ))
            bot.send_message(
                message.chat.id,
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≥–µ—Ä–æ–µ–≤:",
                reply_markup=kb
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–Ω—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {e}")
            bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("charTable::"))
    def char_table_callback(call):
        try:
            short_code = call.data.split("::")[1]
            stat_name = CHARACTERISTICS_MAP[short_code][1]
            
            msg = bot.send_message(
                call.message.chat.id,
                "–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –≥–µ—Ä–æ—è (1-15):"
            )
            bot.register_next_step_handler(msg, lambda m: process_level_input(m, bot, stat_name))
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")
            bot.answer_callback_query(
                call.id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

def process_level_input(message, bot, stat_name):
    try:
        level = int(message.text.strip())
        if not 1 <= level <= 15:
            raise ValueError("–£—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 15")
            
        results = get_heroes_by_stat(stat_name, level)
        
        if not results:
            bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≥–µ—Ä–æ–µ–≤.")
            return
            
        response = f"üèÜ –†–µ–π—Ç–∏–Ω–≥ –≥–µ—Ä–æ–µ–≤ –ø–æ '{stat_name}' –Ω–∞ {level} —É—Ä–æ–≤–Ω–µ:\n\n"
        for idx, (hero, value) in enumerate(results[:10], 1):
            if value is not None:
                response += f"{idx}. {hero}: {round(float(value), 2)}\n"
            else:
                response += f"{idx}. {hero}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
            
        bot.reply_to(message, response)
        
    except ValueError:
        bot.reply_to(
            message,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (–æ—Ç 1 –¥–æ 15)."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Ä–æ–≤–Ω—è: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")